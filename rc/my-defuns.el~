(setq command-list
      '(("mp3 ogg ape flac" .
;;;         "rhythmbox-client --play-uri")
	 emms-add-file)
      ("jpg jpeg png bmp" .
       "gthumb")
      ("pdf djvu ps" .
       "evince")
      ("html htm" .
       "arora")
      ("ogv mpg mpeg avi flv 
	VOB wmv mp4 mov mkv divx
	 ogm m4v asf rmvb 3gp" .
       "smplayer")
      ("doc odf odt rtf" .
       "ooffice")
      ("rar" .
       "unrar.sh")))

(defun build-re (str)
  (let ((re "\\.\\(")
	(ext-list (split-string str)))
    (dotimes (n (- (length ext-list) 1))
      (setq re (concat re (nth n ext-list) "$\\|")))
    (setq re (concat re (car (last ext-list)) "$\\)$"))
    re))

(defun try-open-external (filename)
  (let ((success nil))
    (dolist (command command-list)
      (let ((cmd (cdr command))
	    (re (build-re (car command))))
	(when (string-match re filename)
	  (if (stringp cmd)
	      (shell-command-to-string (concat cmd
					       " "
					       (shell-quote-argument filename)
					       " &> /dev/null &"))
	    (funcall cmd filename))
	  (setq success t))))
    success))

(fset 'old-find-file-noselect (symbol-function 'find-file-noselect))

(defun find-file-noselect (filename &optional nowarn rawfile wildcards)
  (if (try-open-external filename)
      nil
    (old-find-file-noselect filename nowarn rawfile wildcards)))

(defun my-org-find-file (file)
  (when (not (try-open-external file))
    (find-file-other-window file)))

(defun nuke-line ()
  (interactive)
  (beginning-of-line)
  (setq kill-whole-line t)
  (kill-line)
  (setq kill-whole-line nil))




(defun comment-line ()
  (interactive)
  (setq beg (point))
  (move-beginning-of-line nil)
  (setq begreg (point))
  (move-end-of-line nil)
  (comment-or-uncomment-region begreg (point))
  (goto-char beg))

(defun my-comment ()
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-line)))


(defun insert-path ()
  "Inserts a path into the buffer with completion"
  (interactive)
  (insert (read-file-name "Path: ")))

(defun find-file-str ()
  (interactive)
  (find-file (thing-at-point 'filename)))

(defalias 'qrr 'query-replace-regexp)

(add-hook 'before-save-hook
          '(lambda ()
             (or (file-exists-p (file-name-directory buffer-file-name))
                 (make-directory (file-name-directory buffer-file-name) t))))

(defun tex-escape ()
  (interactive)
  (shell-command-on-region (region-beginning)
			   (region-end)
			   "latexesc.sed"
			   (current-buffer)
			   t))

(defun visit-ansi-term ()
  "If we are in an *ansi-term*, rename it.
If there is no *ansi-term*, run it.
If there is one running, switch to that buffer."
  (interactive)
  (if (equal "*ansi-term*" (buffer-name))
      (call-interactively 'rename-buffer)
      (if (get-buffer "*ansi-term*")
   (switch-to-buffer "*ansi-term*")
   (ansi-term "/bin/zsh"))))

(require 'dbus)

(defun show-notification (msg)
  "Show short message (no body, only summary)"
  (show-notification2 "" msg -1))

(defun show-notification2 (body summary time) 
  "Show notification using dbus and org.freedesktop.Notifications.
body - body of notification message; summary - summary of notification; 
time - The timeout time in milliseconds since the display of the notification 
at which the notification should automatically close (-1 the notification's 
expiration time is dependent on the notification server's settings)"
  (dbus-call-method 
   :session 
  "org.freedesktop.Notifications"
   "/org/freedesktop/Notifications"
   "org.freedesktop.Notifications" 
   "Notify"
   "GNU Emacs"                 ;; Application name.
   0                           ;; No replacement of other notifications.
   ""                          ;; No icon.
   (encode-coding-string summary 'utf-8-unix) ;;summary
   (encode-coding-string body    'utf-8-unix) ;; body
   '(:array)                   ;; No actions (empty array of strings).
   '(:array :signature "{sv}") ;; No hints (empty array of dictionary entries).
   ':int32 time))


(require 'executable)

(add-hook 'after-save-hook
	  #'(lambda ()
	      (and (save-excursion
		     (save-restriction
		       (widen)
		       (goto-char (point-min))
		       (save-match-data
			 (looking-at "^#!"))))
		   (not (file-executable-p buffer-file-name))
		   (executable-chmod)
		   (message
		    (concat "Saved as script: " buffer-file-name)))))





(global-set-key (kbd "<f2>") 'visit-ansi-term)
(global-set-key "\C-ct" 'tex-escape)
(global-set-key "\M-/"  'hippie-expand)
(global-set-key "\C-cfs" 'find-file-str)
(global-set-key "\C-cfi" 'semantic-decoration-include-visit)
(global-set-key "\C-ch" 'col-highlight-flash)
(global-set-key (kbd "M-x") 'execute-extended-command)
(global-set-key "\M-;"  'my-comment)
(global-set-key "\C-x["  '(lambda ()
			    (interactive)
			    (shrink-window-horizontally 10)))
(global-set-key "\C-x]"  '(lambda ()
			    (interactive)
			    (shrink-window-horizontally -10)))
(global-set-key [f11] 'compile)
(global-set-key "\C-z" 'undo)
(global-set-key "\C-x\C-b" 'ibuffer)
(global-set-key "\C-cs" 'shell)

(global-set-key "\M-i" '(lambda ()
			  (interactive)
			  (insert "    ")))


(provide 'my-defuns)
